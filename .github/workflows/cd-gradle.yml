name: CD - Docker and Deployment

on:
  workflow_run:
    workflows: ["CI - Java Gradle Workflow"]
    types:
      - completed # CI가 완료되었을 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      checks: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: dev

      # 아티팩트 다운로드
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-artifact

      # 다운로드된 아티팩트 확인
      - name: Verify Artifact
        run: |
          ls -alh
          # 아티팩트 파일이 있는지 확인
          if [ ! -f "./daily-mission-api-server-0.0.1-SNAPSHOT.jar" ]; then
            echo "Artifact not found!";
            exit 1;
          fi

      # Docker Login
      - name: Docker Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Image Build 및 Push
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .  # 컨텍스트는 현재 디렉토리로 설정 (다운로드한 아티팩트가 현재 디렉토리에 있어야 함)
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-boot-server

      # EC2에 배포
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # 다운로드된 아티팩트 확인
            ls -alh
            # Docker Pull 및 EC2에 배포
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-server
            docker stop $(docker ps -a -q) || true
            docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/spring-boot-server
            docker rm $(docker ps --filter 'status=exited' -a -q) || true
            docker image prune -a -f || true
